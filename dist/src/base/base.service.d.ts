import { DeleteResultInterface } from 'src/interfaces/delete-result.interface';
import { BaseEntity, InsertResult, Repository } from 'typeorm';
import { IBaseService } from './i.base.service';
export declare class BaseService<T extends BaseEntity, R extends Repository<T>> implements IBaseService<T> {
    protected repository: R;
    constructor(repository: R);
    findById(id: string): Promise<T>;
    findByIds(ids: string[]): Promise<T[]>;
    get(data: any): Promise<T[]>;
    getWithRelations(data: any): Promise<T[]>;
    loadRelationships(repo: Repository<any>, relationships: string[], baseEntities?: any[]): Promise<{
        [n: number]: any[];
        length: number;
        toString(): string;
        toLocaleString(): string;
        pop(): any[];
        push(...items: any[][]): number;
        concat(...items: ConcatArray<any[]>[]): any[][];
        concat(...items: (any[] | ConcatArray<any[]>)[]): any[][];
        join(separator?: string): string;
        reverse(): any[][];
        shift(): any[];
        slice(start?: number, end?: number): any[][];
        sort(compareFn?: (a: any[], b: any[]) => number): any[][];
        splice(start: number, deleteCount?: number): any[][];
        splice(start: number, deleteCount: number, ...items: any[][]): any[][];
        unshift(...items: any[][]): number;
        indexOf(searchElement: any[], fromIndex?: number): number;
        lastIndexOf(searchElement: any[], fromIndex?: number): number;
        every(callbackfn: (value: any[], index: number, array: any[][]) => unknown, thisArg?: any): boolean;
        some(callbackfn: (value: any[], index: number, array: any[][]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: any[], index: number, array: any[][]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: any[], index: number, array: any[][]) => U, thisArg?: any): U[];
        filter<S extends any[]>(callbackfn: (value: any[], index: number, array: any[][]) => value is S, thisArg?: any): S[];
        filter(callbackfn: (value: any[], index: number, array: any[][]) => unknown, thisArg?: any): any[][];
        reduce(callbackfn: (previousValue: any[], currentValue: any[], currentIndex: number, array: any[][]) => any[]): any[];
        reduce(callbackfn: (previousValue: any[], currentValue: any[], currentIndex: number, array: any[][]) => any[], initialValue: any[]): any[];
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: any[], currentIndex: number, array: any[][]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: any[], currentValue: any[], currentIndex: number, array: any[][]) => any[]): any[];
        reduceRight(callbackfn: (previousValue: any[], currentValue: any[], currentIndex: number, array: any[][]) => any[], initialValue: any[]): any[];
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: any[], currentIndex: number, array: any[][]) => U_2, initialValue: U_2): U_2;
        find<S_1 extends any[]>(predicate: (this: void, value: any[], index: number, obj: any[][]) => value is S_1, thisArg?: any): S_1;
        find(predicate: (value: any[], index: number, obj: any[][]) => unknown, thisArg?: any): any[];
        findIndex(predicate: (value: any[], index: number, obj: any[][]) => unknown, thisArg?: any): number;
        fill(value: any[], start?: number, end?: number): any[][];
        copyWithin(target: number, start: number, end?: number): any[][];
        entries(): IterableIterator<[number, any[]]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<any[]>;
        includes(searchElement: any[], fromIndex?: number): boolean;
    }>;
    store(data: any): Promise<InsertResult>;
    update(id: string, data: any): Promise<T>;
    delete(id: string): Promise<DeleteResultInterface>;
}
