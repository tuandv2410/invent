export declare abstract class NestStorage<TKey extends object = any, TValue = unknown, TNestedMap extends Map<any, TValue> | WeakMap<TKey, TValue> = any> {
    protected storage: WeakMap<TKey, TNestedMap>;
    protected constructor();
    set(key: TKey, nestedKey: any, value: TValue): void;
    get(key: TKey, nestedKey: any): TValue | undefined;
    has(key: TKey, nestedKey: any): boolean;
    protected getInternal<TKey extends object = any, TValue = unknown, TNestedMap extends Map<any, TValue> | WeakMap<TKey, TValue> = any>(storage: WeakMap<TKey, TNestedMap>, key: TKey, nestedKey: any): TValue | undefined;
    protected hasInternal<TKey extends object = any, TValue = unknown, TNestedMap extends Map<any, TValue> | WeakMap<TKey, TValue> = any>(storage: WeakMap<TKey, TNestedMap>, key: TKey, nestedKey: any): boolean;
    protected abstract setInternal<TKey extends object = any, TValue = unknown>(storage: WeakMap<TKey, any>, key: TKey, nestedKey: any, value: TValue): void;
}
export declare abstract class WeakMapNestedStorage<TKey extends object = any, TValue = unknown> extends NestStorage<TKey, TValue, WeakMap<TKey, TValue>> {
    protected constructor();
    dispose(): void;
    protected setInternal<TKey extends object = any, TValue = unknown>(storage: WeakMap<TKey, WeakMap<TKey, TValue>>, key: TKey, nestedKey: TKey, value: TValue): void;
}
export declare abstract class MapNestedStorage<TKey extends object = any, TValue = unknown> extends NestStorage<TKey, TValue, Map<any, TValue>> {
    protected constructor();
    protected setInternal<TKey extends object = any, TValue = unknown>(storage: WeakMap<TKey, Map<any, TValue>>, key: TKey, nestedKey: unknown, value: TValue): void;
}
