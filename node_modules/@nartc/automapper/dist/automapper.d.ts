import 'reflect-metadata';
import { MappingStorage, ProfileStorage } from './storages';
import { AutoMapperGlobalSettings, BaseOf, Constructible, CreateMapFluentFunction, CreateMapOptions, Dict, MapOptions, Mapping, MappingProfile } from './types';
export declare class AutoMapper {
    private readonly _mappingStorage;
    private readonly _profileStorage;
    private defaultGlobalSettings;
    constructor();
    /**
     * Provide global naming conventions and useUndefined to the models
     *
     * @param {AutoMapperGlobalSettings} settings
     */
    withGlobalSettings(settings: AutoMapperGlobalSettings): AutoMapper;
    /**
     * Add a Profile to this AutoMapper instance
     * @param {MappingProfile} profile
     */
    addProfile(profile: new (mapper: AutoMapper) => MappingProfile): AutoMapper;
    /**
     * Create a mapping between a Source and a Destination with an optional Options
     *
     * @param {Constructible} source
     * @param {Constructible} destination
     * @param {CreateMapOptions} options - Provide inheritance and naming conventions for this Mapping
     */
    createMap<TSource extends Dict<TSource> = any, TDestination extends Dict<TDestination> = any, TBaseSource extends BaseOf<TSource, TBaseSource> = any, TBaseDestination extends BaseOf<TDestination, TBaseDestination> = any>(source: Constructible<TSource>, destination: Constructible<TDestination>, options?: CreateMapOptions<TSource, TDestination, TBaseSource, TBaseDestination>): CreateMapFluentFunction<TSource, TDestination>;
    /**
     * Map a sourceObj to the Destination with Source model provided.
     * Usually used to map plain object of Source instead of an instance of Source.
     *
     * @example
     * ```typescript
     * const user = this.db.findOne(...).toJSON();
     * Mapper.map(user, UserVm, User);
     * ```
     *
     * @param {object} sourceObj
     * @param {Constructible} destination
     * @param {Constructible} source
     * @param {MapOptions} options - Provide callbacks for this map operation
     */
    map<TSource extends Dict<TSource> = any, TDestination extends Dict<TDestination> = any>(sourceObj: TSource, destination: Constructible<TDestination>, source?: Constructible<TSource>, options?: MapOptions<TSource, TDestination>): TDestination;
    /**
     * Map a sourceObj to the Destination with an optional Options provided.
     *
     * @param {object} sourceObj
     * @param {Constructible} destination
     * @param {MapOptions} options - Provide callbacks for this map operation
     */
    map<TSource extends Dict<TSource> = any, TDestination extends Dict<TDestination> = any>(sourceObj: TSource, destination: Constructible<TDestination>, options?: MapOptions<TSource, TDestination>): TDestination;
    /**
     * Async version of map()
     */
    mapAsync<TSource extends Dict<TSource> = any, TDestination extends Dict<TDestination> = any>(sourceObj: TSource, destination: Constructible<TDestination>, source?: Constructible<TSource>, options?: MapOptions<TSource, TDestination>): Promise<TDestination>;
    /**
     * Async version of map()
     */
    mapAsync<TSource extends Dict<TSource> = any, TDestination extends Dict<TDestination> = any>(sourceObj: TSource, destination: Constructible<TDestination>, options?: MapOptions<TSource, TDestination>): Promise<TDestination>;
    /**
     * Map a sourceArr to an array of Destination with Source model provided.
     * Usually used to map plain array of Source instead of an instance of Source.
     *
     * @example
     * ```typescript
     * const user = this.db.findOne(...).toJSON();
     * Mapper.map(user, UserVm, User);
     * ```
     *
     * @param {Array} sourceArr
     * @param {Constructible} destination
     * @param {Constructible} source
     * @param {MapOptions} options - Provide callbacks for this map operation
     */
    mapArray<TSource extends Dict<TSource> = any, TDestination extends Dict<TDestination> = any>(sourceArr: TSource[], destination: Constructible<TDestination>, source?: Constructible<TSource>, options?: MapOptions<TSource[], TDestination[]>): TDestination[];
    /**
     * Map a sourceArr to an Array of Destination with an optional Options provided.
     *
     * @param {Array} sourceArr
     * @param {Constructible} destination
     * @param {MapOptions} options - Provide callbacks for this map operation
     */
    mapArray<TSource extends Dict<TSource> = any, TDestination extends Dict<TDestination> = any>(sourceArr: TSource[], destination: Constructible<TDestination>, options?: MapOptions<TSource[], TDestination[]>): TDestination[];
    /**
     * Async version of mapArray()
     */
    mapArrayAsync<TSource extends Dict<TSource> = any, TDestination extends Dict<TDestination> = any>(sourceArr: TSource[], destination: Constructible<TDestination>, source?: Constructible<TSource>, options?: MapOptions<TSource[], TDestination[]>): Promise<TDestination[]>;
    /**
     * Async version of mapArray()
     */
    mapArrayAsync<TSource extends Dict<TSource> = any, TDestination extends Dict<TDestination> = any>(sourceArr: TSource[], destination: Constructible<TDestination>, options?: MapOptions<TSource[], TDestination[]>): Promise<TDestination[]>;
    /**
     * Retrieve the mapping of a Source and a Destination
     *
     * @param {Constructible} source
     * @param {Constructible} destination
     */
    getMapping<TSource extends Dict<TSource> = any, TDestination extends Dict<TDestination> = any>(source: Constructible<TSource>, destination: Constructible<TDestination>): Mapping<TSource, TDestination> | undefined;
    /**
     * Dispose of all Mappings and Profiles on the AutoMapper instance
     */
    dispose(): void;
    /**
     * Retrieve the current instance of the MappingStorage on the AutoMapper instance
     */
    get mappingStorage(): MappingStorage;
    /**
     * Retrieve the current instance of the ProfileStorage on the AutoMapper instance
     */
    get profileStorage(): ProfileStorage;
    private setDefault;
}
export declare const Mapper: AutoMapper;
