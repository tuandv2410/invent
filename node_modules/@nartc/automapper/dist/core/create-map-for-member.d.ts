import { Dict, Mapping, MemberMapFunction, PreConditionFunction, Selector } from '../types';
export declare function createMapForMember<TSource extends Dict<TSource> = any, TDestination extends Dict<TDestination> = any, TSelector extends Selector<TDestination> = Selector<TDestination>, TReturnType = any>(mapping: Mapping<TSource, TDestination>, selector: TSelector, [preCond, mapMemberFn]: [(ReturnType<PreConditionFunction<TSource, TDestination>> | ReturnType<MemberMapFunction<TSource, TDestination>>), ReturnType<MemberMapFunction<TSource, TDestination>>?], fluentFunction: TReturnType): TReturnType;
