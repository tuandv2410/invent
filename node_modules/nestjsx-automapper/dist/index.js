'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var automapper = require('@nartc/automapper');
var common = require('@nestjs/common');
var core = require('@nestjs/core');
var decorators = require('@nestjs/common/decorators');

var MAPPER_MAP = 'nestjs___MAPPER_MAP';
var MapperMap = /*#__PURE__*/new Map();

var PROFILE_MAP = 'nestjs__PROFILE_MAP';
var ProfileMap = /*#__PURE__*/new Map();

var AutomapperExplorer = /*#__PURE__*/function () {
  function AutomapperExplorer(reflector, logger, mapperMap, profileMap) {
    this.reflector = reflector;
    this.logger = logger;
    this.mapperMap = mapperMap;
    this.profileMap = profileMap;
  }

  var _proto = AutomapperExplorer.prototype;

  _proto.explore = function explore() {
    if (!this.profileMap.size) {
      return;
    }

    this.profileMap.forEach(this.exploreProfile.bind(this));
  };

  _proto.exploreProfile = function exploreProfile(value) {
    var mapperKey = this.reflector.get('AUTO_MAPPER_PROFILE', value);
    var mapper = this.mapperMap.get(mapperKey);

    if (!mapper) {
      this.logger.error("There is no Mapper associated with name " + mapperKey.split('__').pop());
      return;
    }

    this.logger.log(value.name + " added to Mapper " + mapperKey.split('__').pop());
    mapper.addProfile(value);
  };

  return AutomapperExplorer;
}();

AutomapperExplorer = /*#__PURE__*/tslib.__decorate([/*#__PURE__*/common.Injectable(), /*#__PURE__*/tslib.__param(2, /*#__PURE__*/common.Inject(MAPPER_MAP)), /*#__PURE__*/tslib.__param(3, /*#__PURE__*/common.Inject(PROFILE_MAP)), /*#__PURE__*/tslib.__metadata("design:paramtypes", [core.Reflector, common.Logger, Map, Map])], AutomapperExplorer);

var AUTOMAPPER = 'nestjs__AUTO_MAPPER__';
var getMapperToken = function getMapperToken(name) {
  return name ? AUTOMAPPER + name : AUTOMAPPER + 'default';
};

/**
 *
 * @deprecated Will be removed soon
 */

var forRootProviders = function forRootProviders(mapper, options) {
  var token = getMapperToken(options ? options.name : '');
  !MapperMap.has(token) && MapperMap.set(token, mapper);
  return [{
    provide: token,
    useValue: mapper
  }];
};
var withMapperProviders = function withMapperProviders(mapper, name) {
  var token = getMapperToken(name);
  !MapperMap.has(token) && MapperMap.set(token, mapper);
  return [{
    provide: token,
    useValue: mapper
  }];
};

function getWithMapperArgs(args) {
  if (!args.length) {
    return [''];
  }

  if (args.length === 2) {
    return [args[0], args[1]];
  }

  if (args.length === 1) {
    var arg = args[0];

    if (typeof arg === 'string') {
      return [arg];
    }

    return ['', arg];
  }

  return [''];
}

var AutomapperModule_1;

exports.AutomapperModule = AutomapperModule_1 = /*#__PURE__*/function () {
  function AutomapperModule(explorer) {
    this.explorer = explorer;
  }

  AutomapperModule.withMapper = function withMapper() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _getWithMapperArgs = getWithMapperArgs(args),
        name = _getWithMapperArgs[0],
        globalSettings = _getWithMapperArgs[1];

    var mapper = new automapper.AutoMapper();

    if (globalSettings != null) {
      mapper.withGlobalSettings(globalSettings);
    }

    var providers = withMapperProviders(mapper, name);
    return {
      module: AutomapperModule_1,
      providers: [].concat(providers, [AutomapperExplorer, {
        provide: PROFILE_MAP,
        useValue: ProfileMap
      }, {
        provide: MAPPER_MAP,
        useValue: MapperMap
      }, {
        provide: common.Logger,
        useValue: this.logger
      }]),
      exports: providers
    };
  }
  /**
   * Initialize an AutoMapper instance with a name. Default to "default"
   *
   * Generally, `forRoot` only needs to be ran once to provide a singleton for the whole application
   *
   * @param {AutomapperModuleRootOptions} options
   * @deprecated Please use withMapper instead
   */
  ;

  AutomapperModule.forRoot = function forRoot(options) {
    var mapper = new automapper.AutoMapper();
    var providers = forRootProviders(mapper, options);
    return {
      module: AutomapperModule_1,
      providers: [].concat(providers, [AutomapperExplorer, {
        provide: PROFILE_MAP,
        useValue: ProfileMap
      }, {
        provide: MAPPER_MAP,
        useValue: MapperMap
      }, {
        provide: common.Logger,
        useValue: this.logger
      }]),
      exports: providers
    };
  };

  var _proto = AutomapperModule.prototype;

  _proto.onModuleInit = function onModuleInit() {
    this.explorer.explore();
  };

  return AutomapperModule;
}();

exports.AutomapperModule.logger = /*#__PURE__*/new common.Logger('AutomapperModule');
exports.AutomapperModule = AutomapperModule_1 = /*#__PURE__*/tslib.__decorate([/*#__PURE__*/common.Global(), /*#__PURE__*/common.Module({}), /*#__PURE__*/tslib.__metadata("design:paramtypes", [AutomapperExplorer])], exports.AutomapperModule);

/**
 * Inject the AutoMapper intsance with name.
 *
 * @param {string} name - Name of the AutoMapper instance
 * @default default
 */

var InjectMapper = function InjectMapper(name) {
  return common.Inject(getMapperToken(name));
};

var Profile = function Profile(name) {
  return function (target) {
    !ProfileMap.has(target) && ProfileMap.set(target, target);
    decorators.SetMetadata('AUTO_MAPPER_PROFILE', getMapperToken(name))(target);
  };
};

Object.defineProperty(exports, 'AutoMap', {
  enumerable: true,
  get: function () {
    return automapper.AutoMap;
  }
});
Object.defineProperty(exports, 'AutoMapper', {
  enumerable: true,
  get: function () {
    return automapper.AutoMapper;
  }
});
Object.defineProperty(exports, 'CamelCaseNamingConvention', {
  enumerable: true,
  get: function () {
    return automapper.CamelCaseNamingConvention;
  }
});
Object.defineProperty(exports, 'PascalCaseNamingConvention', {
  enumerable: true,
  get: function () {
    return automapper.PascalCaseNamingConvention;
  }
});
Object.defineProperty(exports, 'ProfileBase', {
  enumerable: true,
  get: function () {
    return automapper.ProfileBase;
  }
});
Object.defineProperty(exports, 'SnakeCaseNamingConvention', {
  enumerable: true,
  get: function () {
    return automapper.SnakeCaseNamingConvention;
  }
});
Object.defineProperty(exports, 'condition', {
  enumerable: true,
  get: function () {
    return automapper.condition;
  }
});
Object.defineProperty(exports, 'convertUsing', {
  enumerable: true,
  get: function () {
    return automapper.convertUsing;
  }
});
Object.defineProperty(exports, 'fromValue', {
  enumerable: true,
  get: function () {
    return automapper.fromValue;
  }
});
Object.defineProperty(exports, 'ignore', {
  enumerable: true,
  get: function () {
    return automapper.ignore;
  }
});
Object.defineProperty(exports, 'mapDefer', {
  enumerable: true,
  get: function () {
    return automapper.mapDefer;
  }
});
Object.defineProperty(exports, 'mapFrom', {
  enumerable: true,
  get: function () {
    return automapper.mapFrom;
  }
});
Object.defineProperty(exports, 'mapWith', {
  enumerable: true,
  get: function () {
    return automapper.mapWith;
  }
});
Object.defineProperty(exports, 'nullSubstitution', {
  enumerable: true,
  get: function () {
    return automapper.nullSubstitution;
  }
});
Object.defineProperty(exports, 'preCondition', {
  enumerable: true,
  get: function () {
    return automapper.preCondition;
  }
});
exports.InjectMapper = InjectMapper;
exports.MAPPER_MAP = MAPPER_MAP;
exports.MapperMap = MapperMap;
exports.PROFILE_MAP = PROFILE_MAP;
exports.Profile = Profile;
exports.ProfileMap = ProfileMap;
exports.getMapperToken = getMapperToken;
exports.getWithMapperArgs = getWithMapperArgs;
//# sourceMappingURL=index.js.map
