{"version":3,"file":"index.js","sources":["../src/utils/mapperMap.ts","../src/utils/profileMap.ts","../src/automapper.explorer.ts","../src/utils/getMapperToken.ts","../src/automapper.provider.ts","../src/utils/getWithMapperArgs.ts","../src/automapper.module.ts","../src/decorators/inject-mapper.decorator.ts","../src/decorators/profile.decorator.ts"],"sourcesContent":["import { AutoMapper } from '@nartc/automapper';\n\nexport const MAPPER_MAP = 'nestjs___MAPPER_MAP';\nexport const MapperMap: Map<string, AutoMapper> = new Map<string, AutoMapper>();\n","import { Constructible, MappingProfile } from '@nartc/automapper';\n\nexport const PROFILE_MAP = 'nestjs__PROFILE_MAP';\nexport const ProfileMap: Map<\n  Constructible<MappingProfile>,\n  Constructible<MappingProfile>\n> = new Map<Constructible<MappingProfile>, Constructible<MappingProfile>>();\n","import { AutoMapper, Constructible, MappingProfile } from '@nartc/automapper';\nimport { Inject, Injectable, Logger } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { MAPPER_MAP } from './utils/mapperMap';\nimport { PROFILE_MAP } from './utils/profileMap';\n\n@Injectable()\nexport class AutomapperExplorer {\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly logger: Logger,\n    @Inject(MAPPER_MAP) private readonly mapperMap: Map<string, AutoMapper>,\n    @Inject(PROFILE_MAP)\n    private readonly profileMap: Map<\n      Constructible<MappingProfile>,\n      Constructible<MappingProfile>\n    >\n  ) {}\n\n  explore(): void {\n    if (!this.profileMap.size) {\n      return;\n    }\n\n    this.profileMap.forEach(this.exploreProfile.bind(this));\n  }\n\n  private exploreProfile(value: Constructible<MappingProfile>) {\n    const mapperKey = this.reflector.get<string>('AUTO_MAPPER_PROFILE', value);\n    const mapper = this.mapperMap.get(mapperKey);\n\n    if (!mapper) {\n      this.logger.error(\n        `There is no Mapper associated with name ${mapperKey.split('__').pop()}`\n      );\n      return;\n    }\n\n    this.logger.log(\n      `${value.name} added to Mapper ${mapperKey.split('__').pop()}`\n    );\n    mapper.addProfile(value);\n  }\n}\n","const AUTOMAPPER = 'nestjs__AUTO_MAPPER__';\nexport const getMapperToken = (name?: string) =>\n  name ? AUTOMAPPER + name : AUTOMAPPER + 'default';\n","import { AutoMapper } from '@nartc/automapper';\nimport { Provider } from '@nestjs/common';\nimport { AutomapperModuleRootOptions } from './interfaces';\nimport { getMapperToken } from './utils/getMapperToken';\nimport { MapperMap } from './utils/mapperMap';\n\n/**\n *\n * @deprecated Will be removed soon\n */\nexport const forRootProviders = (\n  mapper: AutoMapper,\n  options?: AutomapperModuleRootOptions\n): Provider[] => {\n  const token = getMapperToken(options ? options.name : '');\n  !MapperMap.has(token) && MapperMap.set(token, mapper);\n\n  return [\n    {\n      provide: token,\n      useValue: mapper,\n    },\n  ];\n};\n\nexport const withMapperProviders = (\n  mapper: AutoMapper,\n  name: string\n): Provider[] => {\n  const token = getMapperToken(name);\n  !MapperMap.has(token) && MapperMap.set(token, mapper);\n\n  return [\n    {\n      provide: token,\n      useValue: mapper,\n    },\n  ];\n};\n","import { AutoMapperGlobalSettings } from '@nartc/automapper';\n\nexport function getWithMapperArgs(\n  args: any[]\n): [string, AutoMapperGlobalSettings?] {\n  if (!args.length) {\n    return [''];\n  }\n\n  if (args.length === 2) {\n    return [args[0], args[1]];\n  }\n\n  if (args.length === 1) {\n    const arg = args[0];\n    if (typeof arg === 'string') {\n      return [arg];\n    }\n\n    return ['', arg];\n  }\n\n  return [''];\n}\n","import { AutoMapper, AutoMapperGlobalSettings } from '@nartc/automapper';\nimport { DynamicModule, Global, Logger, Module } from '@nestjs/common';\nimport { OnModuleInit } from '@nestjs/common/interfaces';\nimport { AutomapperExplorer } from './automapper.explorer';\nimport { forRootProviders, withMapperProviders } from './automapper.provider';\nimport { AutomapperModuleRootOptions } from './interfaces';\nimport { getWithMapperArgs } from './utils/getWithMapperArgs';\nimport { MAPPER_MAP, MapperMap } from './utils/mapperMap';\nimport { PROFILE_MAP, ProfileMap } from './utils/profileMap';\n\n@Global()\n@Module({})\nexport class AutomapperModule implements OnModuleInit {\n  private static readonly logger: Logger = new Logger('AutomapperModule');\n\n  /**\n   * Initialize a Mapper with name and globalSettings\n   *\n   * @param {string} name - name of the Mapper instance. Default to 'default'\n   * @param {AutoMapperGlobalSettings} globalSettings - Global Settings for the current Mapper instance\n   */\n  static withMapper(\n    name?: string,\n    globalSettings?: AutoMapperGlobalSettings\n  ): DynamicModule;\n  static withMapper(globalSettings?: AutoMapperGlobalSettings): DynamicModule;\n  static withMapper(...args: any[]): DynamicModule {\n    const [name, globalSettings] = getWithMapperArgs(args);\n    const mapper = new AutoMapper();\n    if (globalSettings != null) {\n      mapper.withGlobalSettings(globalSettings);\n    }\n\n    const providers = withMapperProviders(mapper, name);\n    return {\n      module: AutomapperModule,\n      providers: [\n        ...providers,\n        AutomapperExplorer,\n        { provide: PROFILE_MAP, useValue: ProfileMap },\n        { provide: MAPPER_MAP, useValue: MapperMap },\n        { provide: Logger, useValue: this.logger },\n      ],\n      exports: providers,\n    };\n  }\n\n  /**\n   * Initialize an AutoMapper instance with a name. Default to \"default\"\n   *\n   * Generally, `forRoot` only needs to be ran once to provide a singleton for the whole application\n   *\n   * @param {AutomapperModuleRootOptions} options\n   * @deprecated Please use withMapper instead\n   */\n  static forRoot(options?: AutomapperModuleRootOptions): DynamicModule {\n    const mapper = new AutoMapper();\n\n    const providers = forRootProviders(mapper, options);\n\n    return {\n      module: AutomapperModule,\n      providers: [\n        ...providers,\n        AutomapperExplorer,\n        { provide: PROFILE_MAP, useValue: ProfileMap },\n        { provide: MAPPER_MAP, useValue: MapperMap },\n        { provide: Logger, useValue: this.logger },\n      ],\n      exports: providers,\n    };\n  }\n\n  constructor(private readonly explorer: AutomapperExplorer) {}\n\n  onModuleInit(): void {\n    this.explorer.explore();\n  }\n}\n","import { Inject } from '@nestjs/common';\nimport { getMapperToken } from '../utils/getMapperToken';\n\n/**\n * Inject the AutoMapper intsance with name.\n *\n * @param {string} name - Name of the AutoMapper instance\n * @default default\n */\nexport const InjectMapper = (name?: string) => Inject(getMapperToken(name));\n","import { SetMetadata } from '@nestjs/common/decorators';\nimport { getMapperToken } from '../utils/getMapperToken';\nimport { ProfileMap } from '../utils/profileMap';\n\nexport const Profile: (name?: string) => ClassDecorator = (name?: string) => (\n  target: any\n) => {\n  !ProfileMap.has(target) && ProfileMap.set(target, target);\n  SetMetadata('AUTO_MAPPER_PROFILE', getMapperToken(name))(target);\n};\n"],"names":["MAPPER_MAP","MapperMap","Map","PROFILE_MAP","ProfileMap","AutomapperExplorer","reflector","logger","mapperMap","profileMap","explore","size","forEach","exploreProfile","bind","value","mapperKey","get","mapper","error","split","pop","log","name","addProfile","Injectable","__param","Inject","Reflector","Logger","AUTOMAPPER","getMapperToken","forRootProviders","options","token","has","set","provide","useValue","withMapperProviders","getWithMapperArgs","args","length","arg","AutomapperModule","explorer","withMapper","globalSettings","AutoMapper","withGlobalSettings","providers","module","AutomapperModule_1","exports","forRoot","onModuleInit","Global","Module","InjectMapper","Profile","target","SetMetadata"],"mappings":"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"}